<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="Example.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;srcMLHandlerExample.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SAX2srcMLHandler.hpp&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/parserInternals.h&gt;</cpp:file></cpp:include>

<comment type="line">// create srcml parser with error reporting                                                                            </comment>
<function><type><name>xmlParserCtxtPtr</name></type> <name>srcMLCreateURLParserCtxt</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>infile</name></decl></param>)</parameter_list> <block>{

  <decl_stmt><decl><type><name>xmlParserCtxtPtr</name></type> <name>ctxt</name> =<init> <expr><call><name>xmlCreateURLParserCtxt</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>XML_PARSE_COMPACT</name> | <name>XML_PARSE_HUGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>ctxt</name> == <name>NULL</name></expr>)</condition><then> <block>{

    <comment type="line">// report error                                                                                                    </comment>
    <decl_stmt><decl><type><name>xmlErrorPtr</name></type> <name>ep</name> =<init> <expr><call><name>xmlGetLastError</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  }</block></then></if>

  <return>return <expr><name>ctxt</name></expr>;</return>
}</block></function>
<comment type="line">// process srcML document with error reporting                                                                         </comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>srcMLParseDocument</name><parameter_list>(<param><decl><type><name>xmlParserCtxtPtr</name></type> <name>ctxt</name></decl></param>, <param><decl><type><name>bool</name></type> <name>allowendearly</name></decl></param>)</parameter_list> <block>{

  <comment type="line">// process the document                                                                                              </comment>
  <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
  <if>if <condition>(<expr>(<name>status</name> = <call><name>xmlParseDocument</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call>) == -1</expr>)</condition><then> <block>{

    <decl_stmt><decl><type><name>xmlErrorPtr</name></type> <name>ep</name> =<init> <expr><call><name>xmlCtxtGetLastError</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  }</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *</type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{

  <decl_stmt><decl><type><name>xmlParserCtxtPtr</name></type> <name>ctxt</name> =<init> <expr><call><name>srcMLCreateURLParserCtxt</name><argument_list>(<argument><expr>"example.xml"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>xmlSAXHandler</name></type> <name>sax</name> =<init> <expr><call><name>factory</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SAX2srcMLHandler</name></type> <name>handler</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>srcMLHandlerExample</name></type> <name>example</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>handler</name>.<name>process</name></name> = &amp;<name>example</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>ctxt</name>-&gt;<name>sax</name> = &amp;<name>sax</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ctxt</name>-&gt;<name>_private</name> = &amp;<name>handler</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>srcMLParseDocument</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr>0</expr>;</return>
}</block></function>
</unit>
